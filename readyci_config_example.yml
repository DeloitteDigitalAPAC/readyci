instanceName: Ready CI

# You can specify a number of pipelines. Each needs a unique name
pipelines:

# It's only fitting that our first pipeline builds ReadyCI!
- name: readyci
  parameters:
    gitPath: https://github.com/DeloitteDigitalAPAC/readyci.git
    gitBranch: master
    deploySrcPath: target/readyci-0.5.jar # The path to the build binary
    deployDstPath: /tmp/ # The path to the destination binary

  tasks:
  - task: maven_install # Run maven install

  - task: deploy_copy # Copy the built binary to a deployment destination

# The next pipeline builds an iOS app. Replace the parameters with values from your iOS XCode project
- name: build-an-ios-app
  parameters:
    gitPath: <git url>
    gitBranch: master
    projectPath: ios app
    workspace: <workspace name>
    scheme: <target name>
    configuration: Release
    infoPlistPath: <path to Info.plist>
    hockappToken: <token>
    hockeyappReleaseTags: <tags for release users or groups>
    hockeyappReleaseNotes: New app build available
    iTunesUsername: <itunes upload username>
    iTunesPassword: <itunes upload password>
    iosProfiles:
    - <file 1>.mobileprovision
    - <file 2>.mobileprovision

  tasks:
  - task: ios_pod_install # Pod install

  - task: ios_provisioning_profile_read # Read the provisioning profile and add parameters to the build environment

  - task: ios_export_options_create # Create a exportOptions.plist file

  - task: ios_install_provisioning_profile # Install the provisioning profile in XCode

  - task: ios_archive # Generate an iOS archive

  - task: ios_export # Sign and export the iOS app

  - task: ios_upload_itunes_connect # Upload the binary to iTunes Connect

# This pipeline builds an Android app. Replace the parameters with values from our Android Studio project
- name: build-an-android-app
  parameters:
    gitPath: <git url>
    gitBranch: <branch that you want to clone from>
    scheme: <target name>
    hockappToken: <token>
    hockeyappReleaseTags: <tags for release users or groups>
    hockeyappReleaseNotes: New app build available
    gitCommitMessage: Bumped the build number using Real CI
    gitCommitFileList:
    - <list of updated files to commit back to the repo>
    androidSdkPath: <path to android sdk on local machine>
    javaKeystorePath: <path to jks file>
    storepass: <password for jks file>
    keystoreAlias: <alias name of jks>

  tasks:
  - task: android_create_local_properties #Create a local.properties file and writes the path of the android sdk in it

  - task: android_create_apk_file #Create apk file from project

  - task: android_sign_app #Sign the apk file using the jks file specified

  - task: android_upload_hockeyapp #Upload the apk file to hockeyApp using the hockeyApp token specified

# An example of a pipeline which runs the Sonarqube runner that reports results to a Sonarqube server
- name: sonarqube
  parameters:
    gitPath: git@github.com:DeloitteDigitalAPAC/ready_ci.git
    gitBranch: master
    sonarHostUrl: http://localhost:9000 # Change this to the location of your Sonarqube server if it is not running the same machine
    sonarLoginKey: d6b8060df31705a45130a0e12bae3920f3e1b3f8 # Replace this fake key with the login key generated by your Sonarqube server
    sonarProjectKey: readyci # replace this with the project key you set on your Sonarqube server
    sonarSourcePath: src/ # Use this parameter to set the path to your sourcecode
    sonarBinaryPath: target/ # Set this parameter to the path of your compiled binaries

  tasks:
  - task: maven_install # Run maven install

  - task: sonarqube_runner # Run the Sonarqube runner with the parameters specified above